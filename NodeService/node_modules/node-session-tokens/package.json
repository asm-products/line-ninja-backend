{
  "name": "node-session-tokens",
  "version": "0.1.3",
  "description": "Simple session based token authorization hooks.",
  "main": "lib/index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/dsandor/node-session-tokens"
  },
  "author": {
    "name": "David Sandor",
    "email": "david.sandor@gmail.com",
    "url": "http://buildsucceeded.com/"
  },
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/dsandor/node-session-tokens/issues"
  },
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {
    "fs": "0.0.2",
    "node-uuid": "1.4.1",
    "winston": "0.8.3"
  },
  "readme": "#Tokens for NodeJS\n\n##Purpose\n\nThe purpose of this module is to provide a simple lightweight framework for managing session tokens. \nThis module does NOT provide authentication functionality but rather authorizes requests to a REST service \nafter authentication has already taken place.  By using a session token and combining that with a nonce value tracked\nper session this module will help prevent session hijacking and cross site request forgery attacks.\n\n##Security Standards\n\nThis module implements best practices as specified in the [OWASP](http://www.owasp.org) [suggested best practices for securing REST services](https://www.owasp.org/index.php/REST_Security_Cheat_Sheet).\n\n##Usage\n\n###createSession\n\nCreate a session token with *createSession*.\n\n#####Method Signature\n\n\tcreateSession(complete, error)\n\n#####Example\n\n\tvar auth = require('tokens')();\n\n\tauth.createSession(function (response) {\n\t\tconsole.log('sessionToken      : %s', response.sessionToken);\n\t\tconsole.log('nonce             : %s', response.nonce);\n\t\tconsole.log('expirationDateTime: %s', response.expirationDateTime);\n\t},\n\tfunction(error) {\n\t\tconsole.log('error message: %s', error.message);\n\t});\n\n####response: complete\n\nThe response will contain the newly created session token, the session's nonce value and the session expiration date and time.\n\n\t{\n\t    \"sessionToken\": \"b0c96728-4c44-4c0a-9fca-5563fb1ebe44\",\n\t    \"nonce\": 1,\n\t    \"expiration\": \"2014-11-15T20:02:43.450Z\"\n\t}\n\n###validateSession\n\nSubsequent requests can be validated by calling *validateSession*.\n\n#####Method Signature\n\n\tvalidateSession(sessionToken, nonce, complete, error)\n\n#####Example\n\n\tvar auth = require('tokens')();\n\n\tauth.validateSession(sessionTokenFromRequest, nonceFromRequest,\n\tfunction(response) {\n\t\tconsole.log('sessionToken      : %s', response.sessionToken);\n\t\tconsole.log('nonce             : %s', response.nonce);\n\t\tconsole.log('expirationDateTime: %s', response.expirationDateTime);\n\t},\n\tfunction(error) {\n\t\tconsole.log('error message: %s', error.message);\n\t\tconsole.log('session token: %s', error.sessionToken);\n\t\tconsole.log('nonce: %d', error.nonce);\n\t});\n\n####responses: complete, error\n\n#####complete callback\nThe response from a complete callback contains the following information:\n\n\t{\n\t\tsuccess: true,\n\t\tfailureReason: '',\n\t\tnewSessionInformation: {\n\t\t\t\t\t\t\t\t sessionToken: \"6faf36df-8877-4177-945b-700c4684e7c3\",\n\t\t\t\t\t\t\t\t nonce: 2,\n\t\t\t\t\t\t\t\t expiration: \"2014-11-16T16:41:41.062Z\"\n\t\t\t\t\t\t\t   }\n\t}\n\nIf there is a failure the *success* property will be false, the *failureReason* will contain the error message, and the *newSessionInformation* will be undefined.\nA non-successful response is not the same as an error.  Failures that result in a non-successful result are caused because the session token or the nonce is incorrect.\n\n- A system error such as the inability to read or write to the persisted storage mechanism would result in an error.\n- If there is a system error the complete callback is never called.\n\n#####error callback\nThe error callback will be called if there is a system level error in processing the request. Known error conditions would be:\n\n- could not read or write to the persisted storage\n- invalid or corrupt session data retrieved\n\n###destroySession\n\nA session can be immediately destroyed (and removed from persisted storage) by calling *destroySession*.\n\n#####Method Signature\n\n\tdestroySession(sessionToken, complete, error)\n\n#####Example\n\n\tvar auth = require('tokens')();\n\n\tauth.destroySession(sessionTokenFromRequest,\n\tfunction() {\n\t\tconsole.log('session %s destroyed.', sessionTokenFromRequest);\n\t},\n\tfunction(error) {\n\t\tconsole.log('error message: %s', error.message);\n\t\tconsole.log('session token: %s', error.sessionToken);\n\t});\n\n####responses: complete, error\n\n#####complete callback\nThe complete callback is called with no method arguments as there is no data to return to the caller.\n\n*Please note that if there is an error condition (e.g. the session could not be deleted from the persistence store) the complete callback is not called.\n\n#####error callback\nThe error callback will be called if there is a system level error in processing the request. Known error conditions would be:\n\n- could not read or write to the persisted storage\n\n##Running the unit tests\nThe unit tests use the jasmine-node format.\n\n- To execute them you need to install jasmine: `npm install jasmine-node`\n- Change into the root project folder `node-session-tokens`\n- Execute the unit tests: `jasmine-node spec`\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/dsandor/node-session-tokens",
  "_id": "node-session-tokens@0.1.3",
  "_from": "node-session-tokens@"
}
